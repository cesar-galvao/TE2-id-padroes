dens.setosa = hist_setosa$density,
cont.virginica = hist_virginica$counts,
dens.virginica = hist_virginica$density,
cont.versicolor = hist_versicolor$counts,
dens.versicolor = hist_versicolor$density
) %>%
# seleciona linhas com valores maiores que zero
dplyr::filter(if_any(-ti, ~ . > 0)) %>%
# ajusta decimais para arrumar o tamanho da tabela
mutate(across(everything(), ~ round(., 2)),
across(everything(), ~ if_else(. == 0, NA, .))) %>%
# gera tabela tex
knitr::kable(
align = "c"
)
#| label: tbl-histogramasespecies2
#| tbl-cap: Classificação dos pontos de teste do conjunto de dados iris.
iris2 %>%
dplyr::filter(partition == "teste") %>%
dplyr::select(-Petal.Width, -partition) %>%
mutate(`Classificação` = c("setosa", rep("virginica", 4))) %>%
knitr::kable(align = "cll")
#| label: kdeiris
# obtenção da matriz H
He <- iris2 %>%
dplyr::filter(partition == "treino") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::Hpi()
# kernel density estimation com a H estimada
kdeHe <- iris2 %>%
dplyr::filter(partition == "treino") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::kde(., H=He)
pteste
predict(kdeHe, pteste)
?ks::kde
predict(kdeHe, x = pteste)
iris2 %>%
dplyr::filter(partition == "teste")
#| label: tbl-classificakde
#| tbl-cap: Classificação dos pontos de teste com densidades estimadas para Virgínica e Versicolor.
iris2 %>%
dplyr::filter(partition == "treino") %>%
dplyr::select(Petal.Length, Petal.Width, Species)
#| label: tbl-classificakde
#| tbl-cap: Classificação dos pontos de teste com densidades estimadas para Virgínica e Versicolor.
iris2 %>%
dplyr::filter(partition == "teste") %>%
dplyr::select(Petal.Length, Petal.Width, Species)
#| label: tbl-classificakde
#| tbl-cap: Classificação dos pontos de teste com densidades estimadas para Virgínica e Versicolor.
pteste2 <- iris2 %>%
dplyr::filter(partition == "teste") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
as.matrix()
iris2 %>%
dplyr::filter(partition == "teste", Species != "setosa")
#| label: tbl-classificakde
#| tbl-cap: Classificação dos pontos de teste com densidades estimadas para Virgínica e Versicolor.
pteste2 <- iris2 %>%
dplyr::filter(partition == "teste", Species != "setosa") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
as.matrix()
#| label: kde-species
# H versicolor
He_versi <- iris2 %>%
dplyr::filter(partition == "treino", Species == "versicolor") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::Hpi()
# kde versi
kdeHe_versi <- iris2 %>%
dplyr::filter(partition == "treino", Species == "versicolor") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::kde(., H=He)
# H virginica
He_virg <- iris2 %>%
dplyr::filter(partition == "treino", Species == "virginica") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::Hpi()
# kde virginica
kdeHe_virg <- iris2 %>%
dplyr::filter(partition == "treino", Species == "virginica") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::kde(., H=He)
iris2 %>%
dplyr::filter(partition == "teste", Species != "setosa") %>%
dplyr::select(Petal.Length, Petal.Width, Species) %>%
mutate(dens.versi = predict(kdeHe_versi, x = pteste2),
dens.virg = predict(kdeHe_virg, x = pteste2),
`Classificação` = if_else(dens.versi > dens.virg, "versicolor", "virginica"))
#| label: kde-species
# H versicolor
He_versi <- iris2 %>%
dplyr::filter(partition == "treino", Species == "versicolor") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::Hpi()
# kde versi
kdeHe_versi <- iris2 %>%
dplyr::filter(partition == "treino", Species == "versicolor") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::kde(., H=He_versi)
# H virginica
He_virg <- iris2 %>%
dplyr::filter(partition == "treino", Species == "virginica") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::Hpi()
# kde virginica
kdeHe_virg <- iris2 %>%
dplyr::filter(partition == "treino", Species == "virginica") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::kde(., H=He_virg)
#| label: tbl-classificakde
#| tbl-cap: Classificação dos pontos de teste com densidades estimadas para Virgínica e Versicolor.
pteste2 <- iris2 %>%
dplyr::filter(partition == "teste", Species != "setosa") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
as.matrix()
iris2 %>%
dplyr::filter(partition == "teste", Species != "setosa") %>%
dplyr::select(Petal.Length, Petal.Width, Species) %>%
mutate(dens.versi = predict(kdeHe_versi, x = pteste2),
dens.virg = predict(kdeHe_virg, x = pteste2),
`Classificação` = if_else(dens.versi > dens.virg, "versicolor", "virginica"))
#| label: tbl-classificakde
#| tbl-cap: Classificação dos pontos de teste com densidades estimadas para Virgínica e Versicolor.
pteste2 <- iris2 %>%
dplyr::filter(partition == "teste", Species != "setosa") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
as.matrix()
iris2 %>%
dplyr::filter(partition == "teste", Species != "setosa") %>%
dplyr::select(Petal.Length, Petal.Width, Species) %>%
mutate(dens.versi = predict(kdeHe_versi, x = pteste2),
dens.virg = predict(kdeHe_virg, x = pteste2),
`Classificação` = if_else(dens.versi > dens.virg, "versicolor", "virginica")) %>%
knitr::kable(align = "cclccl",
digits = 2)
#| label: setup
#| echo: false
#| message: false
#| warning: false
if (!("pacman" %in% installed.packages())){
install.packages("pacman")
}
pacman::p_load(tidyverse, cowplot, latex2exp, ks, class, PerformanceAnalytics, MASS, magrittr, reshape2)
#| label: data-iris
#| include: false
data(iris)
#| label: fig-histogramairis
#| fig-cap: Histograma de Petal Length do conjunto de dados iris.
#| fig-height: 2.75
#| echo: false
ggplot(iris, aes(x = Petal.Length, fill = Species)) +
geom_histogram(binwidth = 0.2, alpha = 0.5, position = "identity") +
theme_bw() +
labs(x = "Petal.Length",
y = "Frequência",
fill = "Espécie") +
scale_x_continuous(breaks = seq(0, 7, by = 1))+
xlim(0, NA)+
theme(panel.grid.minor.x = element_line())
#| label: fig-histogramairis2
#| fig-cap: Histograma manual de Petal Length do conjunto de dados iris utilizando h = 0,2.
# bindiwdth
bk1 <- seq(0.5,7.1,by = 0.2)
bk2 <- seq(1, 7, by = 0.2)
par(mfrow = c(1,2))
hist(iris$Petal.Length, probability = T, breaks = bk1,
ylim = c(0,0.8), col = 'blue',
xlab = 't0 = 0.5, h = 0.2', main = "")
rug(iris$Petal.Length)
hist(iris$Petal.Length, probability = T, breaks = bk2,
ylim = c(0,0.8), col = 'blue',
xlab = 't0 = 1, h = 0.2', main = "")
rug(iris$Petal.Length)
#| label: data-iris2traintest
# iris com as variáveis selecionadas
iris2 <- iris %>% dplyr::select(Petal.Length, Petal.Width, Species)
# separação arbitrária de treino e teste
iris2 <- iris2 %>%
mutate(partition = case_when(
Petal.Length == 5.1 & Petal.Width %in% c(1.5, 1.6) ~ "teste",
Petal.Length == 5 & Petal.Width %in% c(1.7, 1.5) ~ "teste",
Petal.Length == 1.9 & Petal.Width == 0.4 ~ "teste",
TRUE ~ "treino"
))
#| label: histogramas-especies
#| output: false
#setosa
hist_setosa <- iris2 %>%
dplyr::filter(Species == "setosa", partition == "treino") %$%
hist(Petal.Length, probability = T, breaks = bk1)
#virginica
hist_virginica <- iris2 %>%
dplyr::filter(Species == "virginica", partition == "treino") %$%
hist(Petal.Length, probability = T, breaks = bk1)
#versicolor
hist_versicolor <- iris2 %>%
dplyr::filter(Species == "versicolor", partition == "treino") %$%
hist(Petal.Length, probability = T, breaks = bk1)
#| label: tbl-histogramasespecies
#| tbl-cap: Histogramas de Petal Length do conjunto de dados iris.
options(knitr.kable.NA = '-')
#monta a tabela com dados dos histogramas
tibble(
ti = hist_setosa$breaks[-34],
cont.setosa = hist_setosa$counts,
dens.setosa = hist_setosa$density,
cont.virginica = hist_virginica$counts,
dens.virginica = hist_virginica$density,
cont.versicolor = hist_versicolor$counts,
dens.versicolor = hist_versicolor$density
) %>%
# seleciona linhas com valores maiores que zero
dplyr::filter(if_any(-ti, ~ . > 0)) %>%
# ajusta decimais para arrumar o tamanho da tabela
mutate(across(everything(), ~ round(., 2)),
across(everything(), ~ if_else(. == 0, NA, .))) %>%
# gera tabela tex
knitr::kable(
align = "c"
)
#| label: tbl-histogramasespecies2
#| tbl-cap: Classificação dos pontos de teste do conjunto de dados iris via histograma.
iris2 %>%
dplyr::filter(partition == "teste") %>%
dplyr::select(-Petal.Width, -partition) %>%
mutate(`Classificação` = c("setosa", rep("virginica", 4))) %>%
knitr::kable(align = "cll")
#| label: kdeiris
# obtenção da matriz H
He <- iris2 %>%
dplyr::filter(partition == "treino") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::Hpi()
# kernel density estimation com a H estimada
kdeHe <- iris2 %>%
dplyr::filter(partition == "treino") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::kde(., H=He)
#| label: fig-kdeiris
#| fig-cap: Densidade estimada do conjunto de dados de treino iris para comprimento e largura da pétala.
#| fig-height: 3.5
pteste <- iris2 %>%
dplyr::filter(partition == "teste") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
as.matrix()
par(mar = c(3,4,4,4), pin = c(4, 2.75))
image(kdeHe$eval.points[[1]],kdeHe$eval.points[[2]],
kdeHe$estimate, xlab = 'Petal Length',
ylab = 'Petal Width')
points(kdeHe$x, col = alpha("black", 0.3))
points(pteste, col = "blue", pch = 8)
#| label: kde-species
# H versicolor
He_versi <- iris2 %>%
dplyr::filter(partition == "treino", Species == "versicolor") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::Hpi()
# kde versi
kdeHe_versi <- iris2 %>%
dplyr::filter(partition == "treino", Species == "versicolor") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::kde(., H=He_versi)
# H virginica
He_virg <- iris2 %>%
dplyr::filter(partition == "treino", Species == "virginica") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::Hpi()
# kde virginica
kdeHe_virg <- iris2 %>%
dplyr::filter(partition == "treino", Species == "virginica") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::kde(., H=He_virg)
#| label: tbl-classificakde
#| tbl-cap: Classificação dos pontos de teste com densidades estimadas para Virgínica e Versicolor.
pteste2 <- iris2 %>%
dplyr::filter(partition == "teste", Species != "setosa") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
as.matrix()
iris2 %>%
dplyr::filter(partition == "teste", Species != "setosa") %>%
dplyr::select(Petal.Length, Petal.Width, Species) %>%
mutate(dens.versi = predict(kdeHe_versi, x = pteste2),
dens.virg = predict(kdeHe_virg, x = pteste2),
`Classificação` = if_else(dens.versi > dens.virg, "versicolor", "virginica")) %>%
knitr::kable(align = "cclccl",
digits = 2)
#| label: fig-scatteriris2
#| fig-cap: Gráfico de dispersão do conjunto de dados iris.
#| fig-height: 3
# gráfico
ggplot() +
geom_point(data = iris2[iris2$partition == "teste",], aes(x = Petal.Length, y = Petal.Width, color = Species), shape = 8) +
geom_point(data = iris2[iris2$partition == "treino",], aes(x = Petal.Length, y = Petal.Width, color = Species), shape = 16) +
theme_bw() +
labs(x = "Petal.Length",
y = "Petal.Width",
color = "Espécie",
shape = "Partição")
#| label: tbl-knniris
#| tbl-cap: Classificação dos pontos de teste do conjunto de dados iris.
treino <- iris2 %>% filter(partition == "treino")
teste <- iris2 %>% filter(partition == "teste")
knn3 <- knn(train = treino[, c(1,2)],
test = teste[, c(1,2)],
cl = treino$Species,
k = 3)
knn5 <- knn(train = treino[, c(1,2)],
test = teste[, c(1,2)],
cl = treino$Species,
k = 5)
data.frame(
teste$Species,
knn3,
knn5
) %>%
knitr::kable(
col.names = c("Espécie real", "k = 3", "k = 5")
)
#| label: fig-knniris
#| fig-cap: Classificação dos pontos de teste do conjunto de dados iris.
#| fig-height: 5
#| fig-width: 6.5
#| echo: false
base <- ggplot(iris2, aes(x = Petal.Length, y = Petal.Width, color = Species)) +
geom_point(alpha = 0.4, shape = 16) +
theme_bw() +
labs(x = "Treino",
y = "",
color = "Espécie")+
theme(legend.position = "none")
knnteste <- teste %>%
mutate(knn3 = knn3, knn5 = knn5)
plotknn3 <- base +
geom_point(data = teste, aes(color = knn3), shape = 8, size = 2.75)+
labs(x = "knn3", y = "")
plotknn5 <- base +
geom_point(data = teste, aes(color = knn5), shape = 8, size = 2.75)+
labs(x = "knn5", y = "")
plot_grid(
plot_grid(plotknn3, plotknn5,nrow = 1, ncol = 2),
plot_grid(NULL, base, NULL, nrow = 1, rel_widths = c(0.5, 1, 0.5)),
nrow = 2)
# Carregando o conjunto de dados iris
data(iris)
# Função para calcular a densidade e criar um data frame
calcular_densidade <- function(x) {
est_densidade <- ks::kde(x = x)
data.frame(x = est_densidade$eval.points, y = est_densidade$estimate)
}
# Calculando a densidade para cada variável
densidade_sepal_length <- calcular_densidade(iris$Sepal.Length)
densidade_sepal_width <- calcular_densidade(iris$Sepal.Width)
densidade_petal_length <- calcular_densidade(iris$Petal.Length)
densidade_petal_width <- calcular_densidade(iris$Petal.Width)
# Adicionando a variável correspondente ao data frame
densidade_sepal_length$Variable <- "Sepal.Length"
densidade_sepal_width$Variable <- "Sepal.Width"
densidade_petal_length$Variable <- "Petal.Length"
densidade_petal_width$Variable <- "Petal.Width"
# Combinando todos os data frames
densidade_total <- rbind(densidade_sepal_length, densidade_sepal_width, densidade_petal_length, densidade_petal_width)
# Plotando a densidade estimada
ggplot(densidade_total, aes(x = x, y = y, color = Variable)) +
geom_line() +
labs(title = "Estimativa de Densidade Kernel",
x = "Valor da Variável",
y = "Densidade") +
theme_minimal() +
theme(legend.title = element_blank())
#| label: sepala
# Selecionando duas colunas para análise multivariada para dados de Sépala
sep<- as.matrix(iris[, 1:2])
# Estimando a densidade usando kernel para dados multivariados
est_densidade_multivariada_sep <- kde(x = sep, compute.cont = TRUE)
# Obtendo os pontos de avaliação e a densidade estimada
eval_points_sep <- expand.grid(est_densidade_multivariada_sep$eval.points[[1]], est_densidade_multivariada_sep$eval.points[[2]])
density_sep <- as.vector(est_densidade_multivariada_sep$estimate)
densidade_df_sep <- data.frame(eval_points_sep, density_sep)
# Renomeando colunas
colnames(densidade_df_sep) <- c("Sepal.Length", "Sepal.Width", "Density")
#| label: fig-densidadeiris2
#| fig-cap: Estimativa de densidade kernel multivariada para as variáveis de sépala do conjunto de dados iris.
#| fig-height: 3
# Visualizando a densidade estimada para duas dimensões com GGPLOT
ggplot(densidade_df_sep, aes(x = Sepal.Length, y = Sepal.Width, fill = Density)) +
geom_tile() +
labs(title = "Estimativa de Densidade Kernel Multivariada",
x = "Sepal Length",
y = "Sepal Width") +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal()
#| label: fig-densidadeiris
#| fig-cap: Estimativa de densidade kernel para as variáveis do conjunto de dados iris.
#| fig-height: 3
ggplot(densidade_total, aes(x = x, y = y, color = Variable)) +
geom_line() +
labs(x = "Valor da Variável",
y = "Densidade") +
theme_minimal() +
theme(legend.title = element_blank())
#| label: petala
### Pétala
# Selecionando duas colunas para análise multivariada para dados de Sépala
pet <- as.matrix(iris[, 3:4])
# Estimando a densidade usando kernel para dados multivariados
est_densidade_multivariada_pet <- kde(x = pet, compute.cont = TRUE)
# Obtendo os pontos de avaliação e a densidade estimada
eval_points_pet <- expand.grid(est_densidade_multivariada_pet$eval.points[[1]], est_densidade_multivariada_pet$eval.points[[2]])
density_pet <- as.vector(est_densidade_multivariada_pet$estimate)
densidade_df_pet <- data.frame(eval_points_pet, density_pet)
# Renomeando colunas
colnames(densidade_df_pet) <- c("Petal.Length", "Petal.Width", "Density")
#| label: fig-densidadeiris3
#| fig-cap: Estimativa de densidade kernel multivariada para as variáveis de pétala do conjunto de dados iris.
#| fig-height: 4
# Visualizando a densidade estimada para duas dimensões com GGPLOT
ggplot(densidade_df_pet, aes(x = Petal.Length, y = Petal.Width, fill = Density)) +
geom_tile() +
labs(title = "Estimativa de Densidade Kernel Multivariada",
x = "Petal Length",
y = "Petal Width") +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal()
#| label: setup
#| echo: false
#| message: false
#| warning: false
if (!("pacman" %in% installed.packages())){
install.packages("pacman")
}
pacman::p_load(tidyverse, cowplot, latex2exp, ks, class, PerformanceAnalytics, MASS, magrittr, reshape2)
#| label: fig-densidadeiris
#| fig-cap: Estimativa de densidade kernel para as variáveis do conjunto de dados iris.
#| fig-height: 3
ggplot(densidade_total, aes(x = x, y = y, color = Variable)) +
geom_line() +
labs(x = "Valor da Variável",
y = "Densidade") +
theme_bw() +
theme(legend.title = element_blank())
ggplot(densidade_total, aes(x = x, y = y, color = Variable)) +
geom_line() +
labs(x = "Valor da Variável",
y = "Densidade") +
theme_bw() +
theme(legend.title = element_blank(),
panel.border = element_blank())
ggplot(densidade_total, aes(x = x, y = y, color = Variable)) +
geom_line() +
labs(x = "Valor da Variável",
y = "Densidade") +
theme_bw() +
theme(legend.title = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black')))
ggplot(densidade_total, aes(x = x, y = y, color = Variable)) +
geom_line() +
labs(x = "Valor da Variável",
y = "Densidade") +
theme_bw() +
theme(legend.title = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
ggplot(densidade_total, aes(x = x, y = y, color = Variable)) +
geom_line() +
labs(x = "Valor da Variável",
y = "Densidade") +
theme_bw() +
theme(legend.title = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'gray'))
ggplot(densidade_total, aes(x = x, y = y, color = Variable)) +
geom_line() +
labs(x = "Valor da Variável",
y = "Densidade") +
theme_bw() +
theme(legend.title = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
ggplot(densidade_total, aes(x = x, y = y, color = Variable)) +
geom_line() +
labs(x = "Valor da Variável",
y = "Densidade") +
theme_bw() +
theme(legend.title = element_blank(),
panel.border = element_blank(),
axis.line = element_line())
# Visualizando a densidade estimada para duas dimensões com GGPLOT
ggplot(densidade_df_sep, aes(x = Sepal.Length, y = Sepal.Width, fill = Density)) +
geom_tile() +
labs(x = "Sepal Length",
y = "Sepal Width") +
scale_fill_gradient(low = "white", high = "blue") +
theme_bw()
# Visualizando a densidade estimada para duas dimensões com GGPLOT
ggplot(densidade_df_sep, aes(x = Sepal.Length, y = Sepal.Width, fill = Density)) +
geom_tile() +
labs(x = "Sepal Length",
y = "Sepal Width") +
scale_fill_gradient(low = "white", high = "blue") +
theme_bw()+
theme(panel.grid = element_blank())
# Visualizando a densidade estimada para duas dimensões com GGPLOT
ggplot(densidade_df_pet, aes(x = Petal.Length, y = Petal.Width, fill = Density)) +
geom_tile() +
labs( x = "Petal Length",
y = "Petal Width") +
scale_fill_gradient(low = "white", high = "blue") +
theme_bw()+
theme(panel.grid = element_blank())
