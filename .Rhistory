theme(legend.title = element_blank())
#| label: petala
### Pétala
# Selecionando duas colunas para análise multivariada para dados de Sépala
pet <- as.matrix(iris[, 3:4])
# Estimando a densidade usando kernel para dados multivariados
est_densidade_multivariada_pet <- kde(x = pet, compute.cont = TRUE)
# Obtendo os pontos de avaliação e a densidade estimada
eval_points_pet <- expand.grid(est_densidade_multivariada_pet$eval.points[[1]], est_densidade_multivariada_pet$eval.points[[2]])
density_pet <- as.vector(est_densidade_multivariada_pet$estimate)
densidade_df_pet <- data.frame(eval_points_pet, density_pet)
# Renomeando colunas
colnames(densidade_df_pet) <- c("Petal.Length", "Petal.Width", "Density")
#| label: fig-densidadeiris3
#| fig-cap: Estimativa de densidade kernel multivariada para as variáveis de pétala do conjunto de dados iris.
#| fig-height: 4
# Visualizando a densidade estimada para duas dimensões com GGPLOT
ggplot(densidade_df_pet, aes(x = Petal.Length, y = Petal.Width, fill = Density)) +
geom_tile() +
labs(title = "Estimativa de Densidade Kernel Multivariada",
x = "Petal Length",
y = "Petal Width") +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal()
#| label: setup
#| echo: false
#| message: false
#| warning: false
if (!("pacman" %in% installed.packages())){
install.packages("pacman")
}
pacman::p_load(tidyverse, cowplot, latex2exp, ks, class, PerformanceAnalytics, MASS, magrittr, reshape2)
#| label: fig-densidadeiris
#| fig-cap: Estimativa de densidade kernel para as variáveis do conjunto de dados iris.
#| fig-height: 3
ggplot(densidade_total, aes(x = x, y = y, color = Variable)) +
geom_line() +
labs(x = "Valor da Variável",
y = "Densidade") +
theme_bw() +
theme(legend.title = element_blank())
ggplot(densidade_total, aes(x = x, y = y, color = Variable)) +
geom_line() +
labs(x = "Valor da Variável",
y = "Densidade") +
theme_bw() +
theme(legend.title = element_blank(),
panel.border = element_blank())
ggplot(densidade_total, aes(x = x, y = y, color = Variable)) +
geom_line() +
labs(x = "Valor da Variável",
y = "Densidade") +
theme_bw() +
theme(legend.title = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black')))
ggplot(densidade_total, aes(x = x, y = y, color = Variable)) +
geom_line() +
labs(x = "Valor da Variável",
y = "Densidade") +
theme_bw() +
theme(legend.title = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
ggplot(densidade_total, aes(x = x, y = y, color = Variable)) +
geom_line() +
labs(x = "Valor da Variável",
y = "Densidade") +
theme_bw() +
theme(legend.title = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'gray'))
ggplot(densidade_total, aes(x = x, y = y, color = Variable)) +
geom_line() +
labs(x = "Valor da Variável",
y = "Densidade") +
theme_bw() +
theme(legend.title = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black'))
ggplot(densidade_total, aes(x = x, y = y, color = Variable)) +
geom_line() +
labs(x = "Valor da Variável",
y = "Densidade") +
theme_bw() +
theme(legend.title = element_blank(),
panel.border = element_blank(),
axis.line = element_line())
# Visualizando a densidade estimada para duas dimensões com GGPLOT
ggplot(densidade_df_sep, aes(x = Sepal.Length, y = Sepal.Width, fill = Density)) +
geom_tile() +
labs(x = "Sepal Length",
y = "Sepal Width") +
scale_fill_gradient(low = "white", high = "blue") +
theme_bw()
# Visualizando a densidade estimada para duas dimensões com GGPLOT
ggplot(densidade_df_sep, aes(x = Sepal.Length, y = Sepal.Width, fill = Density)) +
geom_tile() +
labs(x = "Sepal Length",
y = "Sepal Width") +
scale_fill_gradient(low = "white", high = "blue") +
theme_bw()+
theme(panel.grid = element_blank())
# Visualizando a densidade estimada para duas dimensões com GGPLOT
ggplot(densidade_df_pet, aes(x = Petal.Length, y = Petal.Width, fill = Density)) +
geom_tile() +
labs( x = "Petal Length",
y = "Petal Width") +
scale_fill_gradient(low = "white", high = "blue") +
theme_bw()+
theme(panel.grid = element_blank())
#| label: exemplo-mclustDA
data(faithful)
#| label: exemplo-mclustDA
data(faithful)
force(faithful)
View(faithful)
plot(faithful$waiting, faithful$eruptions)
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red")
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red")
#| label: exemplo-mclustDA
pacman::p_load(mclust, tidyverse)
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red")
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 45, slope = 1, color = "red")
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 40, slope = 1, color = "red")
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 42, slope = 1, color = "red")
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 42, slope = 2, color = "red")
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 42, slope = 10, color = "red")
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 42, slope = 15, color = "red")
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 42, slope = 12, color = "red")
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 42, slope = 13, color = "red")
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 35, slope = 13, color = "red")
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 20, slope = 13, color = "red")
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 25, slope = 13, color = "red")
faithful %>%
mutate(class_1 = if_else(waiting > 25 + 13 * eruptions, "A", "B")) %>% glimpse()
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 25, slope = 13, color = "red")
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 25, slope = 13, color = "red")+
geom_abline(intercept = 95, slope = -13, color = "blue")
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 25, slope = 13, color = "red")+
geom_abline(intercept = 95, slope = -15, color = "blue")
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 25, slope = 13, color = "red")+
geom_abline(intercept = 115, slope = -15, color = "blue")
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 25, slope = 13, color = "red")+
geom_abline(intercept = 110, slope = -15, color = "blue")
dados <- faithful %>%
mutate(class_1 = if_else(waiting > 25 + 13 * eruptions, "A", "B"),
class_2 = if_else(waiting > 110 + -15 * eruptions, "A", "B"))
dados %>%
ggplot(aes(x = eruptions, y = waiting, color = class_1)) +
geom_point()
dados %>%
ggplot(aes(x = eruptions, y = waiting, color = class_2)) +
geom_point()
dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_2))
dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_2))+
labs(color = "")
p1 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_2))+
labs(color = "")+
theme(legend.position = "bottom")
#p1 <-
dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_2))+
labs(color = "")+
theme(legend.position = "bottom")
#p1 <-
dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_2))+
labs(color = "")+
theme_bw()+
theme(legend.position = "bottom")
cowplot::plot_grid(p1, p2, nrow = 1)
p2 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_2))+
labs(color = "")+
theme_bw()+
theme(legend.position = "bottom")
cowplot::plot_grid(p1, p2, nrow = 1)
p1 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_1))+
labs(color = "")+
theme_bw()+
theme(legend.position = "bottom")
p2 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_2))+
labs(color = "")+
theme_bw()+
theme(legend.position = "bottom")
cowplot::plot_grid(p1, p2, nrow = 1)
p1 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_1))+
theme_bw()+
theme(legend.position = "none")
p2 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_2))+
theme_bw()+
theme(legend.position = "none")
cowplot::plot_grid(p1, p2, nrow = 1)
?plot_grid
#| label: exemplo-mclustDA
set.seed(123)
data(faithful)
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point() +
geom_abline(intercept = 25, slope = 13, color = "red")+
geom_abline(intercept = 110, slope = -15, color = "blue")
dados <- faithful %>%
mutate(class_1 = if_else(waiting > 25 + 13 * eruptions, "A", "B"),
class_2 = if_else(waiting > 110 + -15 * eruptions, "A", "B"))
p1 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_1))+
theme_bw()+
theme(legend.position = "none")
p2 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_2))+
theme_bw()+
theme(legend.position = "none")
cowplot::plot_grid(p1, p2, nrow = 1)
dados <- data(faithful) %>%
mutate(class_1 = if_else(waiting > 25 + 13 * eruptions, "A", "B"),
class_2 = if_else(waiting > 110 + -15 * eruptions, "A", "B"))
dados <- data(faithful) %>%
mutate(class_1 = if_else(waiting > 25 + 13 * eruptions, "A", "B"),
class_2 = if_else(waiting > 110 + -15 * eruptions, "A", "B"))
?sample
dados <- faithful %>%
mutate(class_1 = if_else(waiting > 25 + 13 * eruptions, "A", "B"),
class_2 = if_else(waiting > 110 + -15 * eruptions, "A", "B"),
treino = sample(c(0,1),
size = nrow(faithful),
prob = c(0.3, 0.7))
)
dados <- faithful %>%
mutate(class_1 = if_else(waiting > 25 + 13 * eruptions, "A", "B"),
class_2 = if_else(waiting > 110 + -15 * eruptions, "A", "B"),
treino = sample(c(0,1),
size = nrow(faithful),
prob = c(0.3, 0.7),
replace = TRUE)
)
sum(dados$treino)
nrow(faithful)
197/2
197/272
View(dados)
?plot_grid
p1 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_1))+
theme_bw()+
theme(legend.position = "none")
p2 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_2))+
theme_bw()+
theme(legend.position = "none")
cowplot::plot_grid(p1, p2, nrow = 1, labels = c("class_1", "class_2"))
dados <- faithful %>%
mutate(class_2 = if_else(waiting > 25 + 13 * eruptions, "A", "B"),
class_1 = if_else(waiting > 110 + -15 * eruptions, "A", "B"),
treino = sample(c(0,1),
size = nrow(faithful),
prob = c(0.3, 0.7),
replace = TRUE)
)
p1 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_1))+
theme_bw()+
theme(legend.position = "none")
p2 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_2))+
theme_bw()+
theme(legend.position = "none")
cowplot::plot_grid(p1, p2, nrow = 1, labels = c("class_1", "class_2"))
#| label: exemplo de dados
head(dados)
#| label: exemplo de dados
head(dados)
pacman::p_load(mclust, tidyverse, cowplot, magrittr)
?MclustDA
mod1 <- dados %>%
dplyr::filter(treino == 1) %$%
MclustDA(data = cbind(eruptions, waiting),
class = class_1)
mod2 <- dados %>%
dplyr::filter(treino == 1) %$%
MclustDA(data = cbind(eruptions, waiting),
class = class_2)
pacman::p_load(mclust, tidyverse, cowplot, magrittr, qrcode)
qrcode::qr_code("https://github.com/cesar-galvao/TE2-id-padroes") %>%
plot()
plot(mod1, what = "error")
plot(mod2, what = "error")
p3 <- plot(mod1, what = "classification")
p3
p4 <- plot(mod2, what = "error")
p4
plot(mod1, what = "classification")
plot(mod1, what = "error")
plot(mod2, what = "error")
glimpse(dados)
dados %>%
dplyr::filter(treino == 0) %$%
summary(mod1, newdata = c(eruptions, waiting), newclass = treino)
dados %>%
dplyr::filter(treino == 0) %$%
summary(mod1, newdata = tibble(eruptions, waiting), newclass = treino)
dados %>%
dplyr::filter(treino == 0) %$%
summary(mod1, newdata = tibble(eruptions, waiting), newclass = class_1)
dados %>%
dplyr::filter(treino == 0) %$%
summary(mod1, newdata = tibble(eruptions, waiting), newclass = class_2)
?cvMclustDA
#| label: cross-validation
cv1_loo <- cvMclustDA(mod1, nfold = 5)
cv2_loo <- cvMclustDA(mod2, nfold = 5)
#| label: cross-validation
cv1_loo <- cvMclustDA(mod1, nfold = nrow(dados))
cv2_loo <- cvMclustDA(mod2, nfold = nrow(dados))
cv2_loo <- cvMclustDA(mod2, nfold = nrow(dados))
cv1_5 <- cvMclustDA(mod1, nfold = 5)
cv1_5 <- cvMclustDA(mod1, nfold = 5)
cv2_5 <- cvMclustDA(mod2, nfold = 5)
ce_table <- tibble(
modelo = c("class_1", "class_2"),
LOO = c(cv1_loo$ce, cv2_loo$ce),
"5-fold" = c(cv1_5$ce, cv2_5$ce)
)
bs_table <- tibble(
modelo = c("class_1", "class_2"),
LOO = c(cv1_loo$bs, cv2_loo$bs),
"5-fold" = c(cv1_5$bs, cv2_5$bs)
)
#| label: print-cv
knitr::kable(ce_table, caption = "Erro de classificação")
knitr::kable(bs_table, caption = "Brier score")
cv1_5 <- cvMclustDA(mod1, nfold = 5)
cv2_5 <- cvMclustDA(mod2, nfold = 5)
cv2_loo$bs
bs_table <- tibble(
modelo = c("class_1", "class_2"),
LOO = c(cv1_loo$brier, cv2_loo$brier),
"5-fold" = c(cv1_5$brier, cv2_5$brier)
)
knitr::kable(bs_table, caption = "Brier score")
#| label: pacotes
#| include: false
if(!require(pacman)) install.packages("pacman")
pacman::p_load(mclust, tidyverse, cowplot, magrittr, qrcode)
#| label: importacao e tratamento
#| include: false
data(faithful)
set.seed(log(pi))
dados <- faithful %>%
mutate(class_3 = if_else(eruptions > 3 + runif(n(), -.8, .7), "A", "B"),
class_2 = if_else(waiting > 25 + 13 * eruptions, "A", "B"),
class_1 = if_else(waiting > 110 + -15 * eruptions, "A", "B"),
class_4=if_else(waiting > 25 +10  * eruptions, "A", "B"),
lincomb = exp(pi) * eruptions + exp(-2*pi) * waiting)
set.seed(123)
dados <- dados %>%
mutate(
treino = sample(c(0,1),
size = nrow(faithful),
prob = c(0.3, 0.7),
replace = TRUE)
)
proporcao_troca <- 0.05
num_troca <- floor(proporcao_troca * nrow(dados))
indices_troca <- sample(1:nrow(dados), size = num_troca)
dados$class_4[indices_troca] <- ifelse(dados$class_4[indices_troca] == "A", "B", "A")
dados_treino<-dados%>%
dplyr::filter(treino==1)
dados_teste<-dados%>%
dplyr::filter(treino==0)
#| label: exemplo de dados
head(dados) %>%
knitr::kable()
#| label: fig-dados
#| echo: false
#| fig-cap: Dados classificados em classes para testes de desempenho.
p1 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_1))+
theme_bw()+
theme(legend.position = "none")
p2 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_2))+
theme_bw()+
theme(legend.position = "none")
p3 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_3))+
theme_bw()+
theme(legend.position = "none")
p4<-dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_4))+
theme_bw()+
theme(legend.position = "none")
cowplot::plot_grid(p1, p2, p3,p4, nrow = 2, labels = c("class_1", "class_2", "class_3","class_4"))
cowplot::plot_grid(p1, p2, p3,p4, nrow = 2, labels = c("class_1", "class_2", "class_3","class_4"))
#| label: fig-dados
#| include: false
p1 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_1), alpha = .5)+
theme_bw()+
theme(legend.position = "none")
p2 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_2), alpha = .5)+
theme_bw()+
theme(legend.position = "none")
p3 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_3), alpha = .5)+
theme_bw()+
theme(legend.position = "none")
p4<-dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_4), alpha = .5)+
theme_bw()+
theme(legend.position = "none")
cowplot::plot_grid(p1, p2, p3,p4, nrow = 2, labels = c("class_1", "class_2", "class_3","class_4"))
#| label: fig-dados
#| include: false
p1 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_1), alpha = .5)+
theme_bw()+
theme(legend.position = "none")
p2 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_2), alpha = .5)+
theme_bw()+
theme(legend.position = "none")
p3 <- dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_3), alpha = .5)+
theme_bw()+
theme(legend.position = "none")
p4<-dados %>%
ggplot() +
geom_point(aes(x = eruptions, y = waiting, color = class_4), alpha = .5)+
theme_bw()+
theme(legend.position = "none")
cowplot::plot_grid(p1, p2, p3,p4, nrow = 2, labels = c("class_1", "class_2", "class_3","class_4"))
cowplot::plot_grid(p1, p2, p3,p4, nrow = 2, labels = c("class_1", "class_2", "class_3","class_4"))
ggsave("fig-dados.png", grid_plot, dpi = 300)
grid_plot <- cowplot::plot_grid(p1, p2, p3,p4, nrow = 2, labels = c("class_1", "class_2", "class_3","class_4"))
ggsave("fig-dados.png", grid_plot, dpi = 300)
?kable
#| include: false
mod3_custos_conf <- table(dados$class_3, mod3_pred_custos$classification)
