theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = -1, slope = 1/2, color = "red") +
geom_ribbon(aes(ymin = -Inf, ymax = (x1/2 - 1)), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"))+
annotate("text", x = 2, y = -5, label = "y > 0", color = "red", size = 5) +
theme_classic()+
theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = -1, slope = 1/2, color = "red") +
geom_ribbon(aes(ymin = -Inf, ymax = (x1/2 - 1)), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"))+
annotate("text", x = 2, y = -3, label = "y > 0", color = "red", size = 5) +
theme_classic()+
theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = -1, slope = 1/2, color = "red") +
geom_ribbon(aes(ymin = -Inf, ymax = (x1/2 - 1)), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"))+
annotate("text", x = 2, y = -2, label = "y > 0", color = "red", size = 5) +
theme_classic()+
theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = 1, slope = 3, color = "blue") +
geom_ribbon(aes(ymin = -Inf, ymax = (3*x1 + 1)), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2) +
geom_abline(intercept = -1, slope = 1/2, color = "yellow") +
geom_ribbon(aes(ymin = -Inf, ymax = (x1/2 - 1)), xmin = min(data$x1), xmax = Inf, fill = "yellow", alpha = 0.2) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"))+
annotate("text", x = 2, y = -5, label = "y > 0", color = "red", size = 5) +
theme_classic()+
theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = -1, slope = -1/2, color = "red") +
geom_ribbon(aes(ymin = -Inf, ymax = (-x1/2 + 1)), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2)
ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = 1, slope = -1/2, color = "red") +
geom_ribbon(aes(ymin = -Inf, ymax = (-x1/2 + 1)), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2)
ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = 1, slope = -1/2, color = "red") +
geom_ribbon(aes(ymin = (-x1/2 + 1), ymax = Inf), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"))+
annotate("text", x = 2, y = -2, label = "y > 0", color = "red", size = 5) +
theme_classic()+
theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = 1, slope = -1/2, color = "red") +
geom_ribbon(aes(ymin = (-x1/2 + 1), ymax = Inf), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"))+
annotate("text", x = 2, y = 2, label = "y > 0", color = "red", size = 5) +
theme_classic()+
theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = 1, slope = 3, color = "blue") +
geom_ribbon(aes(ymin = -Inf, ymax = (3*x1 + 1)), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2) +
geom_abline(intercept = 1, slope = -1/2, color = "yellow") +
geom_ribbon(aes(ymin = (-x1/2 + 1), ymax = Inf), xmin = min(data$x1), xmax = Inf, fill = "yellow", alpha = 0.2) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"))+
annotate("text", x = 2, y = -5, label = "y > 0", color = "red", size = 5) +
theme_classic()+
theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = 1, slope = 3, color = "blue") +
geom_ribbon(aes(ymin = -Inf, ymax = (3*x1 + 1)), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2) +
geom_abline(intercept = 1, slope = -1/2, color = "yellow") +
geom_ribbon(aes(ymin = (-x1/2 + 1), ymax = Inf), xmin = min(data$x1), xmax = Inf, fill = "yellow", alpha = 0.2) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"))+
annotate("text", x = 2, y = -5, label = TeX("$y_1 \text{e} y_2 > 0$"), color = "red", size = 5) +
theme_classic()+
theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = 1, slope = 3, color = "blue") +
geom_ribbon(aes(ymin = -Inf, ymax = (3*x1 + 1)), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2) +
geom_abline(intercept = 1, slope = -1/2, color = "yellow") +
geom_ribbon(aes(ymin = (-x1/2 + 1), ymax = Inf), xmin = min(data$x1), xmax = Inf, fill = "yellow", alpha = 0.2) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"))+
annotate("text", x = 2, y = -5, label = TeX("$y_1 \\text{e} y_2 > 0$"), color = "red", size = 5) +
theme_classic()+
theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = 1, slope = 3, color = "blue") +
geom_ribbon(aes(ymin = -Inf, ymax = (3*x1 + 1)), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2) +
geom_abline(intercept = 1, slope = -1/2, color = "yellow") +
geom_ribbon(aes(ymin = (-x1/2 + 1), ymax = Inf), xmin = min(data$x1), xmax = Inf, fill = "yellow", alpha = 0.2) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"))+
annotate("text", x = 2.5, y = 2, label = TeX("$y_1, y_2 > 0$"), color = "green", size = 4) +
theme_classic()+
theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = 1, slope = 3, color = "blue") +
geom_ribbon(aes(ymin = -Inf, ymax = (3*x1 + 1)), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2) +
geom_abline(intercept = 1, slope = -1/2, color = "yellow") +
geom_ribbon(aes(ymin = (-x1/2 + 1), ymax = Inf), xmin = min(data$x1), xmax = Inf, fill = "yellow", alpha = 0.2) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"))+
annotate("text", x = 3, y = 3, label = TeX("$y_1, y_2 > 0$"), color = "red", size = 5) +
theme_classic()+
theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = 1, slope = 3, color = "blue") +
geom_ribbon(aes(ymin = -Inf, ymax = (3*x1 + 1)), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2) +
geom_abline(intercept = 1, slope = -1/2, color = "yellow") +
geom_ribbon(aes(ymin = (-x1/2 + 1), ymax = Inf), xmin = min(data$x1), xmax = Inf, fill = "yellow", alpha = 0.2) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"))+
annotate("text", x = 3, y = 3, label = TeX("$y_1, y_2 > 0$"), color = "red", size = 5) +
annotate("text", x = 0, y = 10, label = TeX("$y_1 < 0, y_2 > 0$"), color = "red", size = 5) +
annotate("text", x = 0, y = -7, label = TeX("$y_1 > 0, y_2 < 0$"), color = "red", size = 5) +
annotate("text", x = -4, y = -5, label = TeX("$y_1 < 0, y_2 < 0$"), color = "red", size = 5) +
theme_classic()+
theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = 1, slope = 3, color = "blue") +
geom_ribbon(aes(ymin = -Inf, ymax = (3*x1 + 1)), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2) +
geom_abline(intercept = 1, slope = -1/2, color = "yellow") +
geom_ribbon(aes(ymin = (-x1/2 + 1), ymax = Inf), xmin = min(data$x1), xmax = Inf, fill = "yellow", alpha = 0.2) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"))+
annotate("text", x = 3, y = 3, label = TeX("$y_1, y_2 > 0$"), color = "red", size = 5) +
annotate("text", x = 0, y = 10, label = TeX("$y_1 < 0, y_2 > 0$"), color = "red", size = 5) +
annotate("text", x = 0, y = -7, label = TeX("$y_1 > 0, y_2 < 0$"), color = "red", size = 5) +
annotate("text", x = -3.5, y = -2.5, label = TeX("$y_1 < 0, y_2 < 0$"), color = "red", size = 5) +
theme_classic()+
theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
cowplot::plot_grid(plots, plotq1b, nrow = 1))
#| label: fig-q1b
#| fig-cap: "Hiperplano $-2 + X_1 + 2X_2 = 0$ e interseções entre os planos"
#| echo: false
plotq1b <- ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = 1, slope = -1/2, color = "red") +
geom_ribbon(aes(ymin = (-x1/2 + 1), ymax = Inf), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"))+
annotate("text", x = 2, y = 2, label = "y > 0", color = "red", size = 5) +
theme_classic()+
theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
plots <- ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = 1, slope = 3, color = "blue") +
geom_ribbon(aes(ymin = -Inf, ymax = (3*x1 + 1)), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2) +
geom_abline(intercept = 1, slope = -1/2, color = "yellow") +
geom_ribbon(aes(ymin = (-x1/2 + 1), ymax = Inf), xmin = min(data$x1), xmax = Inf, fill = "yellow", alpha = 0.2) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"))+
annotate("text", x = 3, y = 3, label = TeX("$y_1, y_2 > 0$"), color = "red", size = 5) +
annotate("text", x = 0, y = 10, label = TeX("$y_1 < 0, y_2 > 0$"), color = "red", size = 5) +
annotate("text", x = 0, y = -7, label = TeX("$y_1 > 0, y_2 < 0$"), color = "red", size = 5) +
annotate("text", x = -3.5, y = -2.5, label = TeX("$y_1 < 0, y_2 < 0$"), color = "red", size = 5) +
theme_classic()+
theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
cowplot::plot_grid(plots, plotq1b, nrow = 1))
cowplot::plot_grid(plots, plotq1b, nrow = 1)
#| label: setup
#| include: false
if (!("pacman" %in% installed.packages())){
install.packages("pacman")
}
pacman::p_load(tidyverse, cowplot, latex2exp, e1071, ISLR)
#| label: fig-q1a
#| fig-cap: "Hiperplano $1 + 3X_1 - X_2 = 0$"
data <- data.frame(
x1 = seq(-5, 5, length.out = 100),
x2 = seq(-5, 5, length.out = 100)
)
ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = 1, slope = 3, color = "blue") +
geom_ribbon(aes(ymin = -Inf, ymax = (3*x1 + 1)), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"))+
annotate("text", x = 2, y = -5, label = "y > 0", color = "red", size = 5) +
theme_classic()+
theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
#| label: fig-q1b
#| fig-cap: "Hiperplano $-2 + X_1 + 2X_2 = 0$ e interseções entre os planos"
#| echo: false
#| fig-width: 7
plotq1b <- ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = 1, slope = -1/2, color = "yellow") +
geom_ribbon(aes(ymin = (-x1/2 + 1), ymax = Inf), xmin = min(data$x1), xmax = Inf, fill = "yellow", alpha = 0.2) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"))+
annotate("text", x = 2, y = 2, label = "y > 0", color = "red", size = 5) +
theme_classic()+
theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
plots <- ggplot(data, aes(x = x1, y = x2)) +
geom_abline(intercept = 1, slope = 3, color = "blue") +
geom_ribbon(aes(ymin = -Inf, ymax = (3*x1 + 1)), xmin = min(data$x1), xmax = Inf, fill = "blue", alpha = 0.2) +
geom_abline(intercept = 1, slope = -1/2, color = "yellow") +
geom_ribbon(aes(ymin = (-x1/2 + 1), ymax = Inf), xmin = min(data$x1), xmax = Inf, fill = "yellow", alpha = 0.2) +
scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"))+
annotate("text", x = 3, y = 3, label = TeX("$y_1, y_2 > 0$"), color = "red", size = 4) +
annotate("text", x = 0, y = 10, label = TeX("$y_1 < 0, y_2 > 0$"), color = "red", size = 4) +
annotate("text", x = 0, y = -7, label = TeX("$y_1 > 0, y_2 < 0$"), color = "red", size = 4) +
annotate("text", x = -3, y = -2.5, label = TeX("$y_1 < 0, y_2 < 0$"), color = "red", size = 4) +
theme_classic()+
theme(panel.grid.major = element_line(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
cowplot::plot_grid( plotq1b, plots, nrow = 1)
#| label: fig-q4
set.seed (1)
x <- matrix(rnorm (100 * 2), ncol = 2)
x[1:25, ] <- x[1:25, ] + 2
x[76:100, ] <- x[76:100, ] - 2
y <- c(rep(1, 25), rep(2, 50), rep(1, 25))
dat <- data.frame(x = x, y = as.factor(y))
plot(x, col = y)
#| label: svmfit
# seleciona parte da base como teste = 1
set.seed(1)
test <- sample(c(1, 0), 100, replace = TRUE, prob = c(0.2, 0.8))
# classificador linear
linearfit <- svm(y ~ ., data = dat[test == 0,] , kernel = "linear",
cost = 1, scale = FALSE)
# classificador polinomial
polyfit <- svm(y ~ ., data = dat[test == 0,] , kernel = "polynomial",
degree = 2, cost = 1, scale = FALSE)
# classificador radial
radialfit <- svm(y ~ ., data = dat[test == 0,] , kernel = "radial",
gamma = 1, cost = 1, scale = FALSE)
# plots utilizando dados de treinamento
plot(linearfit, dat[test == 0,])
plot(polyfit, dat[test == 0,])
plot(radialfit, dat[test == 0,])
#| label: tab-svmfit
# table for linear fit
tbl_linear <- table(
true = dat[test == 0, "y"],
pred = predict(
linearfit , newdata = dat[test == 0, ]
)
)
# table for poly fit
tbl_poly <- table(
true = dat[test == 0, "y"],
pred = predict(
polyfit , newdata = dat[test == 0, ]
)
)
# table for radial fit
tbl_radial <- table(
true = dat[test == 0, "y"],
pred = predict(
radialfit , newdata = dat[test == 0, ]
)
)
map(list(tbl_linear, tbl_poly, tbl_radial), function(x) {
x %>%
as.data.frame() %>%
rename("True" = "true", "Predicted" = "pred") %>%
mutate_all(as.character) %>%
mutate(True = if_else(True == "1", "Classe real 1", "Classe real 2"),
Predicted = if_else(Predicted == "1", "Classe fit 1", "Classe fit 2")) %>%
pivot_wider(names_from = "True", values_from = "Freq")
}) %>%
bind_rows() %>%
mutate(Modelo = rep(c("Linear", "Polinomial", "Radial"), each = 2)) %>%
select(Modelo, everything()) %>%
knitr::kable(caption = "Matriz de confusão para os modelos ajustados com os dados de treinamento")
#| label: tab-svmfit_test
# table for linear fit
tbl_linear <- table(
true = dat[test == 1, "y"],
pred = predict(
linearfit , newdata = dat[test == 1, ]
)
)
# table for poly fit
tbl_poly <- table(
true = dat[test == 1, "y"],
pred = predict(
polyfit , newdata = dat[test == 1, ]
)
)
# table for radial fit
tbl_radial <- table(
true = dat[test == 1, "y"],
pred = predict(
radialfit , newdata = dat[test == 1, ]
)
)
map(list(tbl_linear, tbl_poly, tbl_radial), function(x) {
x %>%
as.data.frame() %>%
rename("True" = "true", "Predicted" = "pred") %>%
mutate_all(as.character) %>%
mutate(True = if_else(True == "1", "Classe real 1", "Classe real 2"),
Predicted = if_else(Predicted == "1", "Classe fit 1", "Classe fit 2")) %>%
pivot_wider(names_from = "True", values_from = "Freq")
}) %>%
bind_rows() %>%
mutate(Modelo = rep(c("Linear", "Polinomial", "Radial"), each = 2)) %>%
select(Modelo, everything()) %>%
knitr::kable(caption = "Matriz de confusão para os modelos ajustados com os dados de teste")
#| label: q7a
auto <- ISLR::Auto %>%
mutate(mpg01 = if_else(mpg > median(mpg), 1, 0))
#| label: q7b
auto_nompg <- auto %>% select(-mpg)
set.seed (1)
tune.svc <- tune(svm, mpg01 ~ ., data = auto_nompg,
kernel = "linear",
ranges = list(
cost = c(0.1, 1, 10, 100, 1000)
)
)
#| label: q7c-polynomial
set.seed (1)
tune.svpoly <- tune(svm, mpg01 ~ ., data = auto_nompg,
kernel = "polynomial",
ranges = list(
cost = c(0.1, 1, 10, 100, 1000),
degree = c(2, 3)
)
)
#| label: q7c-radial
set.seed (1)
tune.svradial <- tune(svm, mpg01 ~ ., data = auto_nompg,
kernel = "radial",
ranges = list(
cost = c(0.1, 1, 10, 100, 1000),
gamma = c(0.5, 1, 2, 3, 4)
)
)
summary(tune.svc)
summary(tune.svpoly)
summary(tune.svradial)
#| label: q7c-polynomial
set.seed (1)
tune.svpoly <- tune(svm, mpg01 ~ ., data = auto_nompg,
kernel = "polynomial",
ranges = list(
cost = c(0.1, 1, 10, 100, 1000),
degree = c(2, 3, 4, 5)
)
)
summary(tune.svpoly)
summary(tune.svradial)
tune.svpoly$best.model
tune.svradial$best.model
# Define a range of values for cost and gamma
cost_values <- c(0.1, 1, 10, 100, 1000)
gamma_values <- c(0.5, 1, 2, 3, 4)
degree_values <- c(2, 3, 4, 5)
# Create an empty list to store the fitted models
fitted_radial <- list()
fitted_radial
# Loop over each combination of cost and gamma
for (cost in cost_values) {
for (gamma in gamma_values) {
# Fit the SVM model with the current combination of cost and gamma
SVM <- svm(y ~ ., data = auto_nompg,
kernel = "radial", gamma = gamma, cost = cost,
decision.values = TRUE)
fitted <- attributes(
predict(SVM, auto_nompg, decision.values = TRUE)
)$decision.values
# Add the fitted model to the list
fitted_models[[paste("cost", cost, "gamma", gamma, sep = "_")]] <- fitted
}
}
gamma <- 1
cost = 1
# Fit the SVM model with the current combination of cost and gamma
SVM <- svm(y ~ . , data = auto_nompg,
kernel = "radial", gamma = gamma, cost = cost,
decision.values = TRUE)
SVM <- svm(y ~ . , data = auto_nompg,
kernel = "radial", gamma = gamma, cost = cost,
decision.values = TRUE)
# Fit the SVM model with the current combination of cost and gamma
SVM <- svm(y ~ . , data = auto_nompg,
kernel = "radial", gamma = gamma, cost = cost,
decision.values = TRUE, scale = FALSE)
auto_nompg
# Fit the SVM model with the current combination of cost and gamma
SVM <- svm(mpg01 ~ . ,
data = auto_nompg,
kernel = "radial", gamma = gamma, cost = cost,
decision.values = TRUE, scale = FALSE)
fitted <- attributes(
predict(SVM, auto_nompg, decision.values = TRUE)
)$decision.values
# Create an empty list to store the fitted models
fitted_radial <- list()
# Loop over each combination of cost and gamma
for (cost in cost_values) {
for (gamma in gamma_values) {
# Fit the SVM model with the current combination of cost and gamma
SVM <- svm(mpg01 ~ . ,
data = auto_nompg,
kernel = "radial", gamma = gamma, cost = cost,
decision.values = TRUE, scale = FALSE)
fitted <- attributes(
predict(SVM, auto_nompg, decision.values = TRUE)
)$decision.values
# Add the fitted model to the list
fitted_models[[paste("cost", cost, "gamma", gamma, sep = "_")]] <- fitted
}
}
# Create an empty list to store the fitted models
fitted_radial <- list()
# Loop over each combination of cost and gamma
for (cost in cost_values) {
for (gamma in gamma_values) {
# Fit the SVM model with the current combination of cost and gamma
SVM <- svm(mpg01 ~ . ,
data = auto_nompg,
kernel = "radial", gamma = gamma, cost = cost,
decision.values = TRUE, scale = FALSE)
fitted <- attributes(
predict(SVM, auto_nompg, decision.values = TRUE)
)$decision.values
# Add the fitted model to the list
fitted_radial[[paste("cost", cost, "gamma", gamma, sep = "_")]] <- fitted
}
}
fitted_radial
View(fitted_radial)
#| label: fig-q7d
fit_svc <- attributes(predict(tune.svc$best.model , auto_nompg, decision.values = T))$decision.values
fit_svpoly <- attributes(predict(tune.svpoly$best.model , auto_nompg, decision.values = T))$decision.values
fit_svradial <- attributes(predict(tune.svradial$best.model , auto_nompg, decision.values = T))$decision.values
rocplot(-fit_svc , auto_nompg$mpg01, add = T, col = "red")
rocplot <- function(pred , truth , ...) {
predob <- prediction(pred , truth)
perf <- performance(predob , "tpr", "fpr")
plot(perf , ...)
}
rocplot(-fit_svc , auto_nompg$mpg01, add = T, col = "red")
?prediction
??prediction
pacman::p_load(tidyverse, cowplot, latex2exp, e1071, ISLR, ROCR)
rocplot(-fit_svc , auto_nompg$mpg01, add = T, col = "red")
rocplot <- function(pred , truth , ...) {
predob <- prediction(pred , truth)
perf <- performance(predob , "tpr", "fpr")
plot(perf , ...)
}
#| label: fig-q7d
fit_svc <- attributes(predict(tune.svc$best.model , auto_nompg, decision.values = T))$decision.values
rocplot(-fit_svc , auto_nompg$mpg01, add = T, col = "red")
rocplot(-fit_svc , auto_nompg$mpg01, col = "red")
rocplot(fit_svc , auto_nompg$mpg01, col = "red")
rocplot(fit_svc , auto_nompg$mpg01, col = "red")
rocplot(fit_svpoly , auto_nompg$mpg01, add = T, col = "blue")
rocplot(fit_svradial , auto_nompg$mpg01, add = T, col = "green")
rocplot(fit_svc , auto_nompg$mpg01, col = "red")
rocplot(fit_svpoly , auto_nompg$mpg01, add = T, col = "blue")
rocplot(fit_svradial , auto_nompg$mpg01, add = T, col = "green")
legend("bottomright", legend = paste("Label", 1:10), col = c("red", "blue", "green"), pch = 16)
rocplot(fit_svc , auto_nompg$mpg01, col = "red")
rocplot(fit_svpoly , auto_nompg$mpg01, add = T, col = "blue")
rocplot(fit_svradial , auto_nompg$mpg01, add = T, col = "green")
legend("bottomright", legend = paste("Label", 1:10), col = c("red", "blue", "green"), pch = 16)
rocplot(fit_svc , auto_nompg$mpg01, col = "red")
rocplot(fit_svpoly , auto_nompg$mpg01, add = T, col = "blue")
rocplot(fit_svradial , auto_nompg$mpg01, add = T, col = "green")
legend("bottomright", legend = c("Linear", "Poli.", "Radial"), col = c("red", "blue", "green"), pch = 16)
install.packages("reticulate")
python3
#| label: setup
#| include: false
if (!("pacman" %in% installed.packages())){
install.packages("pacman")
}
pacman::p_load(tidyverse, cowplot, latex2exp, e1071, ISLR, ROCR, reticulate)
reticulate::repl_python()
