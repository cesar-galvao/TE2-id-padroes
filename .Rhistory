mutate(`Classificação` = c("setosa", rep("virginica", 4))) %>%
knitr::kable(align = "cll")
?ks::kde
# kernel density estimation com a H estimada
kdeHe <- iris %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::kde(., H=He)
kdeHe
View(kdeHe)
### TOPICOS 2 - RECONHECIMENTO DE PADROES
### ESTIMACAO NAO PARAMETRICA DE DENSIDADES
### PROFESSOR: GEORGE VON BORRIES
### PACOTES
rm(list=ls())
pkgs = installed.packages()
if (!("ggplot2" %in% pkgs)) install.packages("ggplot2");
library(ggplot2)
if (!("class" %in% pkgs)) install.packages("class");
library(class)
if (!("ks" %in% pkgs)) install.packages("ks");
library(ks)
if (!("mclust" %in% pkgs)) install.packages("mclust");
library(mclust)
if (!("proxy" %in% pkgs)) install.packages("proxy");
library(proxy)
if (!("kdecopula" %in% pkgs)) install.packages("kdecopula");
library(kdecopula)
#### HISTOGRAMA ####
data("faithful")
head(faithful)
fe <- faithful$eruptions
par(mfrow = c(1, 1))
hde <- hist(fe)
hde$breaks
hde$counts
# histogramas de densidade e de contagem ----
par(mfrow = c(2, 3))
for(i in 1:3){
h <- i/4
bk <- (max(fe) - min(fe)) / h
hist(fe, probability = T, breaks = bk,
col = "blue",
main = paste0("h = ",h))
rug(fe)
}
for(i in 1:3){
h <- i/4
bk <- (max(fe) - min(fe)) / h
hist(fe, probability = F, breaks = bk,
col = "blue",
main = paste0("h = ",h))
rug(fe)
}
## Problema 1: Dependencia de t0 ----
set.seed(2024)
u <- runif(n = 100)
# breaks começando antes e em 0
bk1 <- seq(0,1,by = 0.2)
bk2 <- seq(-0.1, 1.1, by = 0.2)
par(mfrow = c(1,2))
hist(u, probability = T, breaks = bk1,
ylim = c(0,1.5), col = 'blue',
main = 't0 = 0, h = 0.2',
xlab = 'runif(100,0,1)')
rug(u)
abline(h = 1, col = 'red')
hist(u, probability = T, breaks = bk2,
ylim = c(0,1.5), col = 'blue',
main = 't0 = -0.1, h = 0.2',
xlab = 'runif(100,0,1)')
rug(u)
abline(h = 1, col = 'red')
# Solucao: Dependencia de t0
par(mfrow = c(2,2))
set.seed(202402)
nr <- rnorm(100000)
plot(density(nr,
kernel = c("rectangular"),
adjust = 30),
main = '', lwd = 1.5,
ylim = c(0,0.4))
par(mfrow = c(2,4))
plot(density(fe,
kernel = c("gaussian")),
main = 'k gaussian', lwd = 1.5,
ylim = c(0,0.6),
xlab = '')
plot(density(fe,
kernel = c("epanechnikov")),
main = 'k epanechnikov', lwd = 1.5,
ylim = c(0,0.6),
xlab = '')
plot(density(fe,
kernel = c("rectangular")),
main = 'k rectangular', lwd = 1.5,
ylim = c(0,0.6),
xlab = '')
plot(density(fe,
kernel = c("triangular")),
main = 'k triangular', lwd = 1.5,
ylim = c(0,0.6),
xlab = '')
plot(density(fe,
kernel = c("biweight")),
main = 'k biweight', lwd = 1.5,
ylim = c(0,0.6),
xlab = '')
plot(density(fe,
kernel = c("cosine")),
main = 'k consine', lwd = 1.5,
ylim = c(0,0.6),
xlab = '')
plot(density(fe,
kernel = c("optcosine")),
main = 'k optcosine', lwd = 1.5,
ylim = c(0,0.6),
xlab = '')
bw.nrd0(fe) # default in density
bw.nrd(fe)  # normal
bw.ucv(fe)  # cross-validation
bw.SJ(fe)   # dpi: directed plug-in
par(mfrow = c(1,1))
plot(density(fe,
kernel = c("gaussian")),
main = 'k gaussian', lwd = 2,
ylim = c(0,0.6))
lines(density(fe,kernel = c("gaussian"), bw = 0.394293), col = 'red',lwd=2)
lines(density(fe,kernel = c("gaussian"), bw = 0.1019193), col = 'blue',lwd=2)
lines(density(fe,kernel = c("gaussian"), bw = 0.1400435), col = 'green',lwd=2)
lines(density(fe,kernel = c("gaussian"), bw = 0.1400435, adjust = 2), col = 'pink',lwd=2)
head(faithful)
(He <- ks::Hpi(faithful))
kdeHe <- ks::kde(faithful, H=He)
plot(kdeHe, display = 'filled.contour2',
cont = c(25,5,75))
plot(kdeHe, display = 'persp')
image(kdeHe$eval.points[[1]],kdeHe$eval.points[[2]],
kdeHe$estimate, xlab = 'Eruptions',
ylab = 'waiting')
points(kdeHe$x)
image(kdeHe$eval.points[[1]],kdeHe$eval.points[[2]],
kdeHe$estimate, xlab = 'Eruptions',
ylab = 'waiting')
gc()
#| label: setup
#| echo: false
#| message: false
#| warning: false
if (!("pacman" %in% installed.packages())){
install.packages("pacman")
}
pacman::p_load(tidyverse, cowplot, latex2exp, ks, class, PerformanceAnalytics, MASS, magrittr)
#| label: data-iris
#| include: false
data(iris)
#| label: fig-histogramairis
#| fig-cap: Histograma de Petal Length do conjunto de dados iris.
#| fig-height: 2.75
#| echo: false
ggplot(iris, aes(x = Petal.Length, fill = Species)) +
geom_histogram(binwidth = 0.2, alpha = 0.5, position = "identity") +
theme_bw() +
labs(x = "Petal.Length",
y = "Frequência",
fill = "Espécie") +
scale_x_continuous(breaks = seq(0, 7, by = 1))+
xlim(0, NA)+
theme(panel.grid.minor.x = element_line())
#| label: fig-histogramairis2
#| fig-cap: Histograma manual de Petal Length do conjunto de dados iris utilizando h = 0,2.
# bindiwdth
bk1 <- seq(0.5,7.1,by = 0.2)
bk2 <- seq(1, 7, by = 0.2)
par(mfrow = c(1,2))
hist(iris$Petal.Length, probability = T, breaks = bk1,
ylim = c(0,0.8), col = 'blue',
xlab = 't0 = 0.5, h = 0.2', main = "")
rug(iris$Petal.Length)
hist(iris$Petal.Length, probability = T, breaks = bk2,
ylim = c(0,0.8), col = 'blue',
xlab = 't0 = 1, h = 0.2', main = "")
rug(iris$Petal.Length)
#| label: data-iris2traintest
# iris com as variáveis selecionadas
iris2 <- iris %>% dplyr::select(Petal.Length, Petal.Width, Species)
# separação arbitrária de treino e teste
iris2 <- iris2 %>%
mutate(partition = case_when(
Petal.Length == 5.1 & Petal.Width %in% c(1.5, 1.6) ~ "teste",
Petal.Length == 5 & Petal.Width %in% c(1.7, 1.5) ~ "teste",
Petal.Length == 1.9 & Petal.Width == 0.4 ~ "teste",
TRUE ~ "treino"
))
#| label: histogramas-especies
#| output: false
#setosa
hist_setosa <- iris2 %>%
dplyr::filter(Species == "setosa", partition == "treino") %$%
hist(Petal.Length, probability = T, breaks = bk1)
#virginica
hist_virginica <- iris2 %>%
dplyr::filter(Species == "virginica", partition == "treino") %$%
hist(Petal.Length, probability = T, breaks = bk1)
#versicolor
hist_versicolor <- iris2 %>%
dplyr::filter(Species == "versicolor", partition == "treino") %$%
hist(Petal.Length, probability = T, breaks = bk1)
#| label: tbl-histogramasespecies
#| tbl-cap: Histogramas de Petal Length do conjunto de dados iris.
options(knitr.kable.NA = '-')
#monta a tabela com dados dos histogramas
tibble(
ti = hist_setosa$breaks[-34],
cont.setosa = hist_setosa$counts,
dens.setosa = hist_setosa$density,
cont.virginica = hist_virginica$counts,
dens.virginica = hist_virginica$density,
cont.versicolor = hist_versicolor$counts,
dens.versicolor = hist_versicolor$density
) %>%
# seleciona linhas com valores maiores que zero
dplyr::filter(if_any(-ti, ~ . > 0)) %>%
# ajusta decimais para arrumar o tamanho da tabela
mutate(across(everything(), ~ round(., 2)),
across(everything(), ~ if_else(. == 0, NA, .))) %>%
# gera tabela tex
knitr::kable(
align = "c"
)
#| label: tbl-histogramasespecies2
#| tbl-cap: Classificação dos pontos de teste do conjunto de dados iris.
iris2 %>%
dplyr::filter(partition == "teste") %>%
dplyr::select(-Petal.Width, -partition) %>%
mutate(`Classificação` = c("setosa", rep("virginica", 4))) %>%
knitr::kable(align = "cll")
#| label: kdeiris
# obtenção da matriz H
He <- iris2 %>%
dplyr::filter(partition == "treino") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::Hpi()
# kernel density estimation com a H estimada
kdeHe <- iris2 %>%
dplyr::filter(partition == "treino") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::kde(., H=He)
#| label: fig-kdeiris
#| fig-cap: Densidade estimada do conjunto de dados iris para comprimento e largura da pétala.
#| fig-height: 3.5
par(mar = c(3,4,4,4), pin = c(4, 2.75))
image(kdeHe$eval.points[[1]],kdeHe$eval.points[[2]],
kdeHe$estimate, xlab = 'Petal Length',
ylab = 'Petal Width')
points(kdeHe$x)
points(kdeHe$x, alpha = 0.3)
par(mar = c(3,4,4,4), pin = c(4, 2.75))
image(kdeHe$eval.points[[1]],kdeHe$eval.points[[2]],
kdeHe$estimate, xlab = 'Petal Length',
ylab = 'Petal Width')
points(kdeHe$x, alpha = 0.3)
image(kdeHe$eval.points[[1]],kdeHe$eval.points[[2]],
kdeHe$estimate, xlab = 'Petal Length',
ylab = 'Petal Width')
points(kdeHe$x, col = alpha("black", 0.4))
par(mar = c(3,4,4,4), pin = c(4, 2.75))
image(kdeHe$eval.points[[1]],kdeHe$eval.points[[2]],
kdeHe$estimate, xlab = 'Petal Length',
ylab = 'Petal Width')
points(kdeHe$x, col = alpha("black", 0.3))
View(kdeHe)
kdeHe[["x"]]
iris2 %>%
dplyr::filter(partition == "teste") %>%
dplyr::select(Petal.Length, Petal.Width)
iris2 %>%
dplyr::filter(partition == "teste") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
as.matrix()
pteste <- iris2 %>%
dplyr::filter(partition == "teste") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
as.matrix()
par(mar = c(3,4,4,4), pin = c(4, 2.75))
image(kdeHe$eval.points[[1]],kdeHe$eval.points[[2]],
kdeHe$estimate, xlab = 'Petal Length',
ylab = 'Petal Width')
points(kdeHe$x, col = alpha("black", 0.3))
points(pteste, col = "blue")
par(mar = c(3,4,4,4), pin = c(4, 2.75))
image(kdeHe$eval.points[[1]],kdeHe$eval.points[[2]],
kdeHe$estimate, xlab = 'Petal Length',
ylab = 'Petal Width')
points(kdeHe$x, col = alpha("black", 0.3))
points(pteste, col = "blue", cex = 8)
par(mar = c(3,4,4,4), pin = c(4, 2.75))
image(kdeHe$eval.points[[1]],kdeHe$eval.points[[2]],
kdeHe$estimate, xlab = 'Petal Length',
ylab = 'Petal Width')
points(kdeHe$x, col = alpha("black", 0.3))
points(pteste, col = "blue", pch = 8)
iris2
predict(kdeHem, pteste)
predict(kdeHe, pteste)
pteste
#| label: setup
#| echo: false
#| message: false
#| warning: false
if (!("pacman" %in% installed.packages())){
install.packages("pacman")
}
pacman::p_load(tidyverse, cowplot, latex2exp, ks, class, PerformanceAnalytics, MASS, magrittr)
#| label: data-iris
#| include: false
data(iris)
#| label: fig-histogramairis
#| fig-cap: Histograma de Petal Length do conjunto de dados iris.
#| fig-height: 2.75
#| echo: false
ggplot(iris, aes(x = Petal.Length, fill = Species)) +
geom_histogram(binwidth = 0.2, alpha = 0.5, position = "identity") +
theme_bw() +
labs(x = "Petal.Length",
y = "Frequência",
fill = "Espécie") +
scale_x_continuous(breaks = seq(0, 7, by = 1))+
xlim(0, NA)+
theme(panel.grid.minor.x = element_line())
#| label: fig-histogramairis2
#| fig-cap: Histograma manual de Petal Length do conjunto de dados iris utilizando h = 0,2.
# bindiwdth
bk1 <- seq(0.5,7.1,by = 0.2)
bk2 <- seq(1, 7, by = 0.2)
par(mfrow = c(1,2))
hist(iris$Petal.Length, probability = T, breaks = bk1,
ylim = c(0,0.8), col = 'blue',
xlab = 't0 = 0.5, h = 0.2', main = "")
rug(iris$Petal.Length)
hist(iris$Petal.Length, probability = T, breaks = bk2,
ylim = c(0,0.8), col = 'blue',
xlab = 't0 = 1, h = 0.2', main = "")
rug(iris$Petal.Length)
#| label: data-iris2traintest
# iris com as variáveis selecionadas
iris2 <- iris %>% dplyr::select(Petal.Length, Petal.Width, Species)
# separação arbitrária de treino e teste
iris2 <- iris2 %>%
mutate(partition = case_when(
Petal.Length == 5.1 & Petal.Width %in% c(1.5, 1.6) ~ "teste",
Petal.Length == 5 & Petal.Width %in% c(1.7, 1.5) ~ "teste",
Petal.Length == 1.9 & Petal.Width == 0.4 ~ "teste",
TRUE ~ "treino"
))
#| label: histogramas-especies
#| output: false
#setosa
hist_setosa <- iris2 %>%
dplyr::filter(Species == "setosa", partition == "treino") %$%
hist(Petal.Length, probability = T, breaks = bk1)
#virginica
hist_virginica <- iris2 %>%
dplyr::filter(Species == "virginica", partition == "treino") %$%
hist(Petal.Length, probability = T, breaks = bk1)
#versicolor
hist_versicolor <- iris2 %>%
dplyr::filter(Species == "versicolor", partition == "treino") %$%
hist(Petal.Length, probability = T, breaks = bk1)
#| label: tbl-histogramasespecies
#| tbl-cap: Histogramas de Petal Length do conjunto de dados iris.
options(knitr.kable.NA = '-')
#monta a tabela com dados dos histogramas
tibble(
ti = hist_setosa$breaks[-34],
cont.setosa = hist_setosa$counts,
dens.setosa = hist_setosa$density,
cont.virginica = hist_virginica$counts,
dens.virginica = hist_virginica$density,
cont.versicolor = hist_versicolor$counts,
dens.versicolor = hist_versicolor$density
) %>%
# seleciona linhas com valores maiores que zero
dplyr::filter(if_any(-ti, ~ . > 0)) %>%
# ajusta decimais para arrumar o tamanho da tabela
mutate(across(everything(), ~ round(., 2)),
across(everything(), ~ if_else(. == 0, NA, .))) %>%
# gera tabela tex
knitr::kable(
align = "c"
)
#| label: tbl-histogramasespecies2
#| tbl-cap: Classificação dos pontos de teste do conjunto de dados iris.
iris2 %>%
dplyr::filter(partition == "teste") %>%
dplyr::select(-Petal.Width, -partition) %>%
mutate(`Classificação` = c("setosa", rep("virginica", 4))) %>%
knitr::kable(align = "cll")
#| label: kdeiris
# obtenção da matriz H
He <- iris2 %>%
dplyr::filter(partition == "treino") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::Hpi()
# kernel density estimation com a H estimada
kdeHe <- iris2 %>%
dplyr::filter(partition == "treino") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::kde(., H=He)
pteste
predict(kdeHe, pteste)
?ks::kde
predict(kdeHe, x = pteste)
iris2 %>%
dplyr::filter(partition == "teste")
#| label: tbl-classificakde
#| tbl-cap: Classificação dos pontos de teste com densidades estimadas para Virgínica e Versicolor.
iris2 %>%
dplyr::filter(partition == "treino") %>%
dplyr::select(Petal.Length, Petal.Width, Species)
#| label: tbl-classificakde
#| tbl-cap: Classificação dos pontos de teste com densidades estimadas para Virgínica e Versicolor.
iris2 %>%
dplyr::filter(partition == "teste") %>%
dplyr::select(Petal.Length, Petal.Width, Species)
#| label: tbl-classificakde
#| tbl-cap: Classificação dos pontos de teste com densidades estimadas para Virgínica e Versicolor.
pteste2 <- iris2 %>%
dplyr::filter(partition == "teste") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
as.matrix()
iris2 %>%
dplyr::filter(partition == "teste", Species != "setosa")
#| label: tbl-classificakde
#| tbl-cap: Classificação dos pontos de teste com densidades estimadas para Virgínica e Versicolor.
pteste2 <- iris2 %>%
dplyr::filter(partition == "teste", Species != "setosa") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
as.matrix()
#| label: kde-species
# H versicolor
He_versi <- iris2 %>%
dplyr::filter(partition == "treino", Species == "versicolor") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::Hpi()
# kde versi
kdeHe_versi <- iris2 %>%
dplyr::filter(partition == "treino", Species == "versicolor") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::kde(., H=He)
# H virginica
He_virg <- iris2 %>%
dplyr::filter(partition == "treino", Species == "virginica") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::Hpi()
# kde virginica
kdeHe_virg <- iris2 %>%
dplyr::filter(partition == "treino", Species == "virginica") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::kde(., H=He)
iris2 %>%
dplyr::filter(partition == "teste", Species != "setosa") %>%
dplyr::select(Petal.Length, Petal.Width, Species) %>%
mutate(dens.versi = predict(kdeHe_versi, x = pteste2),
dens.virg = predict(kdeHe_virg, x = pteste2),
`Classificação` = if_else(dens.versi > dens.virg, "versicolor", "virginica"))
#| label: kde-species
# H versicolor
He_versi <- iris2 %>%
dplyr::filter(partition == "treino", Species == "versicolor") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::Hpi()
# kde versi
kdeHe_versi <- iris2 %>%
dplyr::filter(partition == "treino", Species == "versicolor") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::kde(., H=He_versi)
# H virginica
He_virg <- iris2 %>%
dplyr::filter(partition == "treino", Species == "virginica") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::Hpi()
# kde virginica
kdeHe_virg <- iris2 %>%
dplyr::filter(partition == "treino", Species == "virginica") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
ks::kde(., H=He_virg)
#| label: tbl-classificakde
#| tbl-cap: Classificação dos pontos de teste com densidades estimadas para Virgínica e Versicolor.
pteste2 <- iris2 %>%
dplyr::filter(partition == "teste", Species != "setosa") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
as.matrix()
iris2 %>%
dplyr::filter(partition == "teste", Species != "setosa") %>%
dplyr::select(Petal.Length, Petal.Width, Species) %>%
mutate(dens.versi = predict(kdeHe_versi, x = pteste2),
dens.virg = predict(kdeHe_virg, x = pteste2),
`Classificação` = if_else(dens.versi > dens.virg, "versicolor", "virginica"))
#| label: tbl-classificakde
#| tbl-cap: Classificação dos pontos de teste com densidades estimadas para Virgínica e Versicolor.
pteste2 <- iris2 %>%
dplyr::filter(partition == "teste", Species != "setosa") %>%
dplyr::select(Petal.Length, Petal.Width) %>%
as.matrix()
iris2 %>%
dplyr::filter(partition == "teste", Species != "setosa") %>%
dplyr::select(Petal.Length, Petal.Width, Species) %>%
mutate(dens.versi = predict(kdeHe_versi, x = pteste2),
dens.virg = predict(kdeHe_virg, x = pteste2),
`Classificação` = if_else(dens.versi > dens.virg, "versicolor", "virginica")) %>%
knitr::kable(align = "cclccl",
digits = 2)
